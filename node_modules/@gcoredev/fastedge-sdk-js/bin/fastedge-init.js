#!/usr/bin/env node

// src/fastedge-init/create-config.js
import { writeFile } from "node:fs/promises";

// src/constants/index.js
var PROJECT_DIRECTORY = ".fastedge";
var CONFIG_FILE_PATH = `${PROJECT_DIRECTORY}/build-config.js`;

// src/utils/file-system.js
import { mkdir, mkdtemp, readdir, stat } from "node:fs/promises";
import path from "node:path";

// src/utils/prompts.js
import enquirer from "enquirer";
var { Confirm, Input, MultiSelect, Select } = enquirer;
var NO_COLOUR = "\x1B[0m";
var promptColors = {
  error: "\x1B[31m",
  // Red
  success: "\x1B[32m",
  // Green
  warning: "\x1B[33m",
  // Yellow
  info: "\x1B[34m",
  // Blue
  caution: "\x1B[35m",
  // Magenta
  standard: NO_COLOUR
};
var colorLog = (color, ...restArgs) => {
  if (color === "error") {
    console.error(promptColors[color] ?? NO_COLOUR, ...restArgs, NO_COLOUR);
    return;
  }
  console.info(promptColors[color] ?? NO_COLOUR, ...restArgs, NO_COLOUR);
};
var inputPrompt = async (question, initial) => {
  const prompt = new Input({
    message: question,
    initial
  });
  return prompt.run();
};
var selectPrompt = async (question, choices, initial) => {
  const prompt = new Select({
    name: question,
    message: question,
    initial,
    choices
  });
  const selection = await prompt.run();
  const { value } = choices.find((choice) => choice.name === selection);
  return value ?? selection;
};
var confirmPrompt = async (question, defaultValue = true) => {
  const prompt = new Confirm({
    name: question,
    message: question,
    initial: defaultValue,
    format: () => ""
  });
  return prompt.run();
};

// src/utils/file-system.js
async function isDirectory(path3, withContent = false) {
  try {
    const stats = await stat(path3);
    if (stats.isDirectory()) {
      if (withContent) {
        const files = await readdir(path3);
        return files.length > 0;
      }
      return true;
    }
    return false;
  } catch (error) {
    if (error.code === "ENOENT") {
      return false;
    }
    throw error;
  }
}
async function createOutputDirectory(outputPath) {
  try {
    await mkdir(path.dirname(outputPath), {
      recursive: true
    });
  } catch (error) {
    colorLog(
      "error",
      `Error: Failed to create the "output" (${outputPath}) directory`,
      error.message
    );
    process.exit(1);
  }
}
async function isFile(filePath, allowNonexistent = false) {
  try {
    const stats = await stat(filePath);
    return stats.isFile();
  } catch (error) {
    if (error.code === "ENOENT") {
      return allowNonexistent;
    }
    throw error;
  }
}

// src/fastedge-init/create-config.js
var defaultConfig = {
  build: {
    http: {},
    next: {},
    static: {
      input: ".fastedge/static-index.js",
      ignoreDotFiles: true,
      ignoreDirs: ["./node_modules"],
      ignoreWellKnown: false
    }
  },
  server: {
    http: {},
    next: {},
    static: {
      extendedCache: [],
      publicDirPrefix: "",
      compression: [],
      // not implemented - seems excessive for inline-wasm sizes ['br', 'gzip']
      notFoundPage: "/404.html",
      autoExt: [],
      // never used before
      autoIndex: ["index.html", "index.htm"]
    }
  }
};
function mergeWithDefaultConfig(configObjType, type, config) {
  return JSON.stringify(
    {
      type,
      ...defaultConfig[configObjType][type],
      ...config
    },
    null,
    2
  );
}
async function createConfigFile(type, buildConfig, serverConfig) {
  const buildConfigStr = mergeWithDefaultConfig("build", type, buildConfig);
  const serverConfigStr = mergeWithDefaultConfig("server", type, serverConfig);
  await createOutputDirectory(CONFIG_FILE_PATH);
  const fileContents = [
    `const config = ${buildConfigStr};`,
    "",
    `const serverConfig = ${serverConfigStr}`,
    "",
    "export { config, serverConfig };",
    ""
  ].join("\n");
  await writeFile(CONFIG_FILE_PATH, fileContents, "utf-8");
}
async function createProjectFiles() {
  await createOutputDirectory(PROJECT_DIRECTORY);
  const packageJsonContents = [
    "{",
    '  "name": "fastedge-build",',
    '  "version": "1.0.0",',
    '  "description": "fastedge-build project folder uses ES6",',
    '  "type": "module"',
    "}"
  ].join("\n");
  await writeFile(`${PROJECT_DIRECTORY}/package.json`, packageJsonContents, "utf-8");
  const jsConfigContents = ["{", '  "compilerOptions": {', '    "target": "ES6"', "  }", "}"].join(
    "\n"
  );
  await writeFile(`${PROJECT_DIRECTORY}/jsconfig.json`, jsConfigContents, "utf-8");
}

// src/fastedge-init/http-handler.js
async function setupHttpApp() {
  const inputFileName = await inputPrompt("Enter the path to your entry file:", "src/index.js");
  if (!await isFile(inputFileName)) {
    colorLog("error", `Error: Input "${inputFileName}" is not a file`);
    process.exit(1);
  }
  const outputFileName = await inputPrompt(
    "Enter the path to your output file:",
    ".fastedge/dist/main.wasm"
  );
  if (outputFileName.slice(-5) !== ".wasm") {
    colorLog("error", `Error: Output ${outputFileName} must be a .wasm file path`);
    process.exit(1);
  }
  await createConfigFile("http", {
    input: inputFileName,
    output: outputFileName
  });
}

// src/fastedge-init/static-site.js
import { writeFile as writeFile2 } from "node:fs/promises";
import path2 from "node:path";

// src/utils/config-helpers.js
var removeDotSlashPrefix = (str) => str.replace(/^\.\//u, "");
var removeTrailingSlash = (str) => str.replace(/\/+$/u, "");
function normalizePath(path3 = "", prefix = "") {
  let normalizedPath = removeDotSlashPrefix(path3);
  normalizedPath = removeTrailingSlash(normalizedPath);
  if (!normalizedPath.startsWith("/")) {
    normalizedPath = `/${normalizedPath}`;
  }
  return `${prefix}${normalizedPath}`;
}

// src/fastedge-init/static-site.js
var createInputFile = async (inputFileName) => {
  const fileContents = [
    "/*",
    " * Generated by @gcoredev/FastEdge-sdk-js fastedge-init",
    " */",
    "",
    'import { getStaticServer, createStaticAssetsCache } from "@gcoredev/fastedge-sdk-js";',
    'import { staticAssetManifest } from "./build/static-server-manifest.js";',
    'import { serverConfig } from "./build-config.js";',
    "",
    "const staticAssets = createStaticAssetsCache(staticAssetManifest);",
    "",
    "const staticServer = getStaticServer(serverConfig, staticAssets);",
    "",
    "async function handleRequest(event) {",
    "  const response = await staticServer.serveRequest(event.request);",
    "  if (response != null) {",
    "    return response;",
    "  }",
    "",
    '  return new Response("Not found", { status: 404 });',
    "}",
    "",
    'addEventListener("fetch", (event) => event.respondWith(handleRequest(event)));',
    ""
  ].join("\n");
  await createOutputDirectory(inputFileName);
  await writeFile2(inputFileName, fileContents, "utf-8");
};
async function setupStaticApp() {
  const inputFileName = ".fastedge/static-index.js";
  await createInputFile(inputFileName);
  const outputFileName = await inputPrompt(
    "Enter the path to your output file:",
    ".fastedge/dist/fastedge.wasm"
  );
  if (outputFileName.slice(-5) !== ".wasm") {
    colorLog("error", `Error: Output ${outputFileName} must be a .wasm file path`);
    process.exit(1);
  }
  const publicDirectory = await inputPrompt("Enter the path to your public directory:", "./build");
  const directoryExists = await isDirectory(publicDirectory, true);
  if (!directoryExists) {
    colorLog("error", `Error: Public directory "${publicDirectory}" is not a directory`);
    process.exit(1);
  }
  const isSpa = await confirmPrompt(
    "Is your site a single page application? ( e.g. React )",
    false
  );
  let spaEntrypoint = null;
  if (isSpa) {
    const entrypoint = await inputPrompt("Enter the path to your SPA entrypoint:", "./index.html");
    const spaEntrypointExists = await isFile(
      path2.resolve(path2.join(publicDirectory, "./index.html"))
    );
    if (spaEntrypointExists) {
      spaEntrypoint = normalizePath(entrypoint);
    } else {
      colorLog(
        "warning",
        `Error: SPA entrypoint "${entrypoint}" does not exist in the public directory. Please check the path`
      );
    }
  }
  await createProjectFiles();
  await createConfigFile(
    "static",
    {
      input: inputFileName,
      output: outputFileName,
      publicDir: publicDirectory
    },
    {
      spaEntrypoint
    }
  );
}

// src/fastedge-init/index.js
var alreadyHasConfigFile = await isFile(CONFIG_FILE_PATH);
if (alreadyHasConfigFile) {
  colorLog("warning", `Warning: FastEdge config file '${CONFIG_FILE_PATH}' already exists`);
  const overwrite = await confirmPrompt(
    "Do you want to overwrite the existing config file?",
    false
  );
  if (!overwrite) {
    process.exit(0);
  }
}
var initType = await selectPrompt(
  "What are you trying to build?",
  [
    { name: "Http event-handler", value: "http" },
    { name: "Static website", value: "static" }
  ],
  "Http event-handler"
);
switch (initType) {
  case "http":
    await setupHttpApp();
    break;
  case "static":
    await setupStaticApp();
    break;
  default:
    process.exit(1);
}
colorLog("success", "FastEdge initialization completed successfully");
